name: Lint and Type Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Build project
        run: npm run build:production
        env:
          # Use dummy values for build-time environment variables
          VITE_SUPABASE_URL: "https://dummy.supabase.co"
          VITE_SUPABASE_ANON_KEY: "dummy-key"
          VITE_ENABLE_DEBUG_LOGGING: "false"

  # Separate job for dependency security audit
  security-audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true # Don't fail the build on audit issues

      - name: Check for known vulnerabilities
        run: |
          echo "Checking for high/critical vulnerabilities..."

          # Run audit and capture output
          AUDIT_OUTPUT=$(npm audit --audit-level=high --json 2>/dev/null || echo '{"vulnerabilities":{}}')

          # Check if jq is available, if not install it
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Count high/critical vulnerabilities
          HIGH_CRITICAL_COUNT=$(echo "$AUDIT_OUTPUT" | jq -r '.vulnerabilities | to_entries | map(select(.value.severity == "high" or .value.severity == "critical")) | length')

          if [ "$HIGH_CRITICAL_COUNT" -gt 0 ]; then
            echo "⚠️ Found $HIGH_CRITICAL_COUNT high or critical vulnerabilities!"
            npm audit --audit-level=high
            echo ""
            echo "Please run 'npm audit fix' or 'npm audit fix --force' to resolve these issues."
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"

            # Show moderate vulnerabilities for awareness but don't fail
            MODERATE_COUNT=$(npm audit --audit-level=moderate --json 2>/dev/null | jq -r '.vulnerabilities | to_entries | map(select(.value.severity == "moderate")) | length' || echo "0")
            if [ "$MODERATE_COUNT" -gt 0 ]; then
              echo "ℹ️ Found $MODERATE_COUNT moderate vulnerabilities (not blocking build):"
              npm audit --audit-level=moderate || true  # Don't fail on moderate vulnerabilities
            fi

            # Ensure we exit successfully when no critical/high vulnerabilities
            exit 0
          fi
