# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[PRE-COMMIT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[PRE-COMMIT]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[PRE-COMMIT]${NC} $1"
}

print_error() {
    echo -e "${RED}[PRE-COMMIT]${NC} $1"
}

# Check if this is a merge commit (skip hooks for merge commits)
if git rev-parse -q --verify MERGE_HEAD >/dev/null; then
    print_status "Merge commit detected, skipping pre-commit hooks"
    exit 0
fi

# Check for emergency bypass flag
if [ "$SKIP_LINT" = "true" ] || [ "$NO_VERIFY" = "true" ]; then
    print_warning "Linting checks bypassed via environment variable"
    exit 0
fi

print_status "Running pre-commit checks..."

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    print_warning "No staged files found"
    exit 0
fi

# Check if any TypeScript/JavaScript files are staged
TS_JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ -z "$TS_JS_FILES" ]; then
    print_status "No TypeScript/JavaScript files staged, skipping lint checks"
    exit 0
fi

print_status "Found staged TypeScript/JavaScript files:"
echo "$TS_JS_FILES" | sed 's/^/  - /'

# Run TypeScript type checking
print_status "Running TypeScript type checking..."
if ! npm run type-check 2>/dev/null; then
    print_status "TypeScript type-check script not found, running tsc directly..."
    if ! npx tsc --noEmit; then
        print_error "TypeScript type checking failed!"
        print_error "Fix the type errors above and try again."
        print_error ""
        print_error "To bypass this check temporarily, use:"
        print_error "  git commit --no-verify"
        print_error "  or set SKIP_LINT=true"
        exit 1
    fi
fi

# Run ESLint on staged files
print_status "Running ESLint on staged files..."
if ! echo "$TS_JS_FILES" | xargs npx eslint --max-warnings 0; then
    print_error "ESLint found errors or warnings!"
    print_error "Fix the linting issues above and try again."
    print_error ""
    print_error "To bypass this check temporarily, use:"
    print_error "  git commit --no-verify"
    print_error "  or set SKIP_LINT=true"
    exit 1
fi

# Run Prettier check on staged files
print_status "Checking code formatting with Prettier..."
if ! echo "$TS_JS_FILES" | xargs npx prettier --check; then
    print_warning "Code formatting issues found!"
    print_status "Auto-fixing formatting issues..."

    # Auto-fix formatting and stage the changes
    echo "$TS_JS_FILES" | xargs npx prettier --write
    echo "$TS_JS_FILES" | xargs git add

    print_success "Code formatting fixed and staged"
fi

print_success "All pre-commit checks passed!"
print_status "Proceeding with commit..."
